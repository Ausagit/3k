#nop gentech.tin
/*
	Modified from Inix's original file to streamline the mip data, and extend functionality via
	the core aliases included below:
	tac               - repair/stabilize/tactical yourself and others
	bias              - maintain a list of area::biases to automatically rebias on entry
	leech             - leech off of other gentech, or allow them to leech off of you
	cpc [auto/#]      - configure cpc donations using the remote cpc transfer experiment
	rb <bias>         - quick alias to pause stepper, rebias defense on kill, then resume
	cab	<bias> [cmd]  - conform attack bias, regardless of whether it's higher or lower, execute cmd on complete
	cdb <bias> [cmd]  - conform defense bias, regardless of whether it's higher or lower, execute cmd on complete
	cte			      - turn corpse trigger on
	ctd			      - turn corpse trigger off (divvy on kill)
	ctp			      - turn corpse trigger on for parties, will grab stuff but divvy gold
	mask [on/off/all] - if using the mask module, this will configure the mask, read the mask header for more info
	onk [clear/cmd]   - execute the command on every kill, or clear it
	onk1 [clear/cmd]  - execute the command once then clear it

	Additional modules used in this file:
	mask.tin     - use for reclaiming PU from corpses wiether you have a mask or not
	scaler.tin   - maintain a list of area::scalers to automatically change on entry
	onkill.tin   - execute a command or script when an enemy dies
	backpack.tin - simple script to cycle through gentech backpack gathering

	Make the modifications to mip.tin with the code contained in mip.tin (partial) to
	make sure all the guild mip data is captured, else things may not work correctly.
*/

#nop read the common guild file - ths includes all the required modules and common functions
#read {.tt/3k/guilds/guilds_common.tin}

#class {gentech} {kill}
#class {gentech} {open}

#variable {guild} {gentech}
#variable {last_echelon} {0}
#variable {cpc_low} {0}
#variable {cpc_auto} {1}
#variable {cpc_auto_min} {8}
#variable {cpc_auto_max} {50}
#variable {gentech[gxp][last]} {0}
#variable {gentech[rc][last]} {0}
#variable {gentech[gxp][round]} {0}
#variable {gentech[rc][round]} {0}
#variable {bias_module} {1}
#variable {tactical_module} {1}
#variable {leech_module} {1}
#variable {onbiaslock} {}
#variable {biases_enabled} {1}
#variable {tactical_on} {1}
#variable {leech_on} {0}
#variable {leech_from} {}

#variable {area_rating} {0}
#variable {global_hardmode} {0}
#list {tactical_list} {create} {}

#gag {^[[ The Central Power Core is reaching its maximum capacity}
#gag {^[[ Central Power Core at Maximal Levels}
#gag {^[[     Aborting Remote Transfer}
#gag {^[[[ **WARNING**   PANIC HEAL ACTIVATED}
#gag {^[[ <WARNING> :: Power Unit Storage At Minimum}
#gag {^[> Power Unit Recharge Complete}
#gag {^[>      Reclamation Complete}
#gag {^Your genetic arm strike}

#nop aliases - added here to keep them seperate for gswaps
#alias {kt1} {ktrig wrap/slab/reclaim}
#alias {kt2} {ktrig wrap/reclaim}
#alias {kt3} {ktrig recharge/reclaim}
#alias {tsl} {timeslide}
#alias {tslq} {timeslide query}
#alias {tscs} {timescan set;timescan query}
#alias {tscq} {timescan query}
#alias {ak} {autokill}
#alias {ag} {autoguild %1}
#alias {bl} {biaslock}
#alias {sellall} {sell all;sellbpall}
#alias {donateall} {donate all;donatebpall}
#alias {trashall} {trashbpall}

#alias {startrun}
{
    .stop;
   	#delay {0.5} {fix all;home;bank;deposit all;withdraw 1000;home;guild;e;u;w;n;trashall;s;e;d;w;home;smithy;mapgo smithy;cdb 120 examine smith}
}

#alias {suitup}
{
	jump;e;home;morgue;acquire coffin;home;bank;deposit all;withdraw 100000;home;
	guild;e;u;w;w;#2 buy 3;#4 buy 4;keep all;wear all;genarm sword;e;e;u;e;e;commence;
	#delay {25} {=call;=afollow on;=aswap on;=akill on;w;w;d;d;w;home;chaos;enter;s;s;w;w;enter;n;n;n;n;
	#4 buy moon rocks;#2 put moon rocks in backpack 5;#2 put moon rocks in backpack 6;s;s;s;s;leave;e;e;n;n;vortex;home;
	mapgo home}
}

/*
	Add guildsetup as the first command in a stepper botpath to set states for the dungeon/area.
	Use it to change gear, scaler, biases, etc. Call the .. alias when complete
*/
#alias {guildsetup}
{
	.stop;
	#nop make sure dungeons are cleared;
	dungeons;

	#if {$combat_que_module} {
		rate run
	};
	#nop switch scaler using the scaler module;
	#if {$scalers_module} {
		scaler run
	};
	#nop switch bias using the bias module, it will .. when bias change is finished or not required;
	#if {$bias_module} {
		bias run
	}
}

/*
	Events from guilds_common.tin
*/
#alias {on_kshield_equip} {autocombat bash}
#alias {on_kshield_remove} {autocombat clear}
#alias {on_hockey_fan} {#send !recharge;#send !reclaim}

#alias {cpc}
{
	#if {"%1" == "" || "%1" == "0"} {
		#variable {cpc_auto} {0};
		#send !repeat off;
		#echo {<ffa>You will not longer contribute any CPC per round.}
	}; #elseif {"%1" == "auto"} { 
		cpc $cpc_auto_min;
		#variable {cpc_auto} {1}
	}; #else {
		#if {"%2" != "auto"} {
			#variable {cpc_auto} {0}
		};
		#send !repeat combat/conduit %1/0/1;
		#echo {<ffa>You will contribute %1+ CPC per round.}
	}
}

#alias {corpsetrig}
{
	#if {$combat_que_on == 1} {cq refresh};
	
	#nop wrap/slab/reclaim handled by ktrig, if you don't have ktrig handle it this alias;
	#if {$corpsetrig_on} {
		#if {$corpsetrig_on == 2} {
			#send !divvy coins;
		} {
			#send !get coins;
		};
		#if {$backpack_module} {
			stacknext
		};
	} {
		#send !divvy coins;
	};
	#if {$tactical_module && $gentech[efield][num] > 0} {
		tac run
	};
	#if {$onkill_module} {
		onkillrun
	}
}

/*
	Miscellaneous
*/
#action {^Echelon: %1 of [} {#variable {last_echelon} {%1}}
#action {^ [[ Timeslide Complete} {(heal $ses_name;meditate}
#action {^[[ You have advanced to echelon [%1] in your order in the Gen-High Council. ]]}
{
	update_chat Echelon $last_echelon -> %1!;
	#variable {last_echelon} {%1}
}

/*
	Powerfeed & corpse leeching
*/
#action {^%1 pokes you in the ribs}
{
	#if {@storedcorpses{} > 4 && $my[gp1][perc] > 30 && $gentech[efield][num] > 0} {
		#local {maxtransfer} {};
		#math {maxtransfer} {$my[gp1][max] / 10};
		#send !powerfeed @tolower{%1} $maxtransfer
	}
}
#action {^That player is not a member of the Gentech Guild}
{
	#nop non-gentech has poked you, feed them a corpse;
	#if {$corpses[coffin] > 0} {
		#send !unwrap
	}; #elseif {$corpses[freezer] > 0} {
		#send !deslab
	}; #else {
		#send !uncooler corpse
	}
}

/*
	Update variables and perform actions that only need to be checked once per round as
	update_status may be called several times per round.
*/
#ticker {gen_heartbeat}
{
	#nop Calculate GXP and RC per round;
	#variable {gentech[gxp][round]} {0};
	#variable {gentech[rc][round]} {0};
		
	#if {$gentech[gxp][last] != $gentech[gxp][tnl]} {
		#math {gentech[gxp][round]} {$gentech[gxp][last] - $gentech[gxp][tnl]};
		#variable {gentech[gxp][last]} {$gentech[gxp][tnl]}
	};		
	#if {$gentech[rc][last] != $gentech[rc][num]} {
		#math {gentech[rc][round]} {$gentech[rc][num] - $gentech[rc][last]};
		#variable {gentech[rc][last]} {$gentech[rc][num]}
	};
	#math {gentech[gxprc]} {$gentech[gxp][round] + $gentech[rc][round]};

	#nop recharge PU from SPU - adjust to suit your specific requirements;
	#nop at order 10, recharge when (SPU > 0) and (PU < 6300 or (SPU > 3915 and PU < 8730));
	#if {($my[gp2][current] > 0) && (($my[gp1][perc] < 70) || (($my[gp2][perc] > 87) && ($my[gp1][perc] < 97)))} {
		#delay {recharge} {#send !recharge} {0.1}
	};

	#nop Refill SPU from corpses;
	#if {($recently_reclaimed == 0) && ($leech_on == 0) && ($enemy[hp] > 1) && ($my[gp1][perc] < 55)} {
		#if {$mask_module} {
			#nop the mu alias is part of the mask.tin module;
			#delay {reclaim} {mu} {0.1}
		} {
			#delay {reclaim} {
				#send !recharge;
				#send !unwrap;
				#send !reclaim
			} {0.1}
		}
	};

	#if {$cpc_auto == 1 && $mip[round] > 0} {
		#if {$gentech[cpc][current] < 9000} {
			#if {$cpc_low == 0} {
				cpc $cpc_auto_max auto;
				#variable {cpc_low} {1}
			}
		} {
			#if {$cpc_low == 1} {
				cpc $cpc_auto_min auto;
				#variable {cpc_low} {0}
			}
		}
	};

	#path get length path_len;
	#path get position path_pos;

} {2}

/*
	Allows you to automatically change bias when entering an area, based on a preconfigured list of area::dbias entries.
	The data is automatically saved to the file .tt/3k/char/<charname>-bias.tin file.
	
	Add guildsetup as the first command in the area's botpath variable add a guildsetup alias to your gentech.tin file.
	Add 'bias run' to the alias.

	Commands:
	bias add <area> <dbias>		- add the desired defense bias fror the area
	bias remove <area>			- remove the area from the list
	bias enable					- enable automatic bias changes (default)
	bias disable				- disable automatic bias changes
	bias run					- start the bias change for the currently loaded stepper file, $bots[stepper]
	bias						- dispaly the list of areas and defense biases
	cdb <value> <opt command>	- switch defense bias and execute command when complete
	cab <value> <opt command>	- switch offense bias and execute command when complete
	rb <value>					- executes a .stop and onk1 to rebias to <value> when the current mob dies, then .resumes
*/
#class {mybiases} {kill}
#nop read the configured area biases for the current character
#class {mybiases} {read} {.tt/char/$ses_name-bias.tin}
#class {mybiases} {size} {mybiasessize};

#if {$mybiasessize == 0} {
	#echo {Bias file not found, creating default.};
	#class {mybiases} {kill};
	#class {mybiases} {open};
	#variable {biases} {};
	#class {mybiases} {close};
	#class {mybiases} {save};
	#class {mybiases} {write} {.tt/char/$ses_name-bias.tin};
	#unvariable {mybiasessize}
}

/*
	Change defense bias, called by genbias, or can be used manually
	cdb <value> <optional command to execute when complete>
*/
#alias {cdb}
{
	#local {args} {%0};
	#local {onbias} {};
	#local {dbias} {0};

	#regexp {$args} {%d %+} {
		#variable {dbias} {&1};
		#variable {onbias} {&2}
	} {
		#variable {dbias} {%1}
	};

	#if {$dbias >= 0 && $dbias <= 190} {
		#if {$dbias == $gentech[bias][def]} {
			#echo {<fca>Already at $gentech[bias][def] defense bias.<088>};
			#variable {onbiaslock} {$onbias};
			#if {"$onbias" != ""} {
				#delay {2} {
					$onbiaslock;
					#variable {onbiaslock} {}
				}
			}
		}; #else {
			#if {"$gentech[bias][mode]" == "Locked"} {
				#send !biaslock
			};
			#if {$dbias > $gentech[bias][def]} {
				#send !conform defense bias $dbias
			}; #else {
				#local {oppbias} {};
				#math  {oppbias} {190 - $dbias};
				#send !conform attack bias $oppbias
			};
			#variable {onbiaslock} {$onbias};
			#if {"$onbias" != ""} {
				#echo {<fca>Executing $onbiaslock when bias change is complete.<088>}
			}
		}
	}; #else {
		#echo {<fca>Syntax is cdb <defense bias> <optional command to execute upon completion>.<088>}
	}
}

/*
	Change attack bias, called by genbias, or can be used manually.
	cab <value> <optional command to execute when complete>
*/
#alias {cab}
{
	#local {args} {%0};
	#local {onbias} {};
	#local {abias} {0};

	#regexp {$args} {%d %+} {
		#variable {abias} {&1};
		#variable {onbias} {&2}
	} {
		#variable {abias} {%1}
	};

	#if {$abias >= 0 && $abias <= 190} {
		#if {$abias == $gentech[bias][atk]} {
			#echo {<fca>Already at $gentech[bias][atk] attack bias.<088>};
			#variable {onbiaslock} {$onbias};
			#if {"$onbias" != ""} {
				#delay {2} {
					$onbiaslock;
					#variable {onbiaslock} {}
				}
			}
		}; #else {
			#if {"$gentech[bias][mode]" == "Locked"} {
				#send !biaslock
			};
			#if {$abias > $gentech[bias][atk]} {
				#send !conform attack bias $abias
			}; #else {
				#local {oppbias} {};
				#math  {oppbias} {190 - $abias};
				#send !conform defense bias $oppbias
			};
			#variable {onbiaslock} {$onbias};
			#if {"$onbias" != ""} {
				#echo {<fca>Executing $onbiaslock when bias change is complete.<088>}
			}
		}
	}; #else {
		#echo {<fca>Syntax is cab <attack bias> <optional command to execute upon completion>.<088>}
	}
}

/*
	Shortcut for re-biasing between kills in steppers
*/
#alias {rb %1} {
	#if {$onkill_module} {
		.stop;
		onk1 cdb %1 .resume
	} {
		#echo {<fca>Onkill module is required.<088>}
	}
}

/*
	Execute the optional commands from cab/cdb upon reaching the target bias
*/
#action {^        BIAS CONFORMATION HAS REACHED SPECIFIED DIFFERENTIAL}
{
	#send !biaslock;
	#if {"$onbiaslock" != ""} {
		$onbiaslock;
		#variable {onbiaslock} {}
	}
}

/*
	Manage bias changes between steppers
*/
#alias {bias}
{
	#switch {"%1"} {
		#case "add" {
			#if {"%2" != "" && "%3" != "" && %3 >= 0 && %3 <= 190} {
				#variable {biases[%2]} {%3};
				#class {mybiases} {write} {.tt/char/$ses_name-bias.tin};
				#echo {<fca>Area %2 bias set to %3.<088>}
			} {
				#echo {<fca>Invalid arguments, example usage: bias set aegis 90<088>}
			}
		};
		#case "remove" {
			#if {"%2" != ""} {
				#unvariable {biases[%2]};
				#class {mybiases} {write} {.tt/char/$ses_name-bias.tin};
				#echo {<fca>Area %2 bias removed.<088>}
			} {
				#echo {<fca>Invalid arguments, example usage: bias claer aegis<088>}
			}
		};
		#case "on" {
			#variable {biases_enabled} {1};
			#echo {<fca>Automatic area bias changes enabled.<088>}
		};
		#case "off" {
			#variable {biases_enabled} {0};
			#echo {<fca>Automatic area bias changes disabled.<088>}
		};
		#case "run" {
			#local {handled} {0};
			#if {$biases_enabled} {
				#if {"$bots[stepper]" == ""} {
					#echo {<fca>No stepper loaded!<088>};
					#local {handled} {1};
				} {
					#if {"$biases[$bots[stepper]]" != ""} {
						cdb $biases[$bots[stepper]] ..;
						#local {handled} {1}
					}
				}
			};
			#if {$handled == 0} {
				#delay {2} {..}
			}
		};
		#default {
			#local {biasout} {<228> +--------------------------+<088>};
			#if {$biases_enabled} {
				#format {biasout} {%s\n<228> |<138> Defense Biases      [on] <228>|<088>} {$biasout}
			} {
				#format {biasout} {%s\n<228> |<138> Defense Biases     [off] <228>|<088>} {$biasout}
			};
			#format {biasout} {%s\n<228> +--------------------------+<088>} {$biasout};
			#if {&{biases[]} == 0} {
				#format {biasout} {%s\n<228> |<178>      No Biases set       <228>|<088>} {$biasout}
			} {
				#foreach {*biases[%*]} {name} {
					#format {biasout} {%s\n<228> |<148> %+3s - %-18s <088><228>|<088>} {$biasout} {$biases[$name]} {$name}
				}				
			};
			#echo {%s\n<228> +--------------------------+<088>} {$biasout}
		}
	}
}

/*
    Utility for leeching PU from another gentech.
    Modify the two actions at the bottom of the file to suit your preference.

    In your gentech.tin file turn off auto reclaim functions while $leech_on == 1.

    Commands:
    leech <name>        - Starts a ticker to poke <name> every 10 seconds if your PU is below 33%
    leech off           - Turns off the leeching and ticker
*/
#alias {leech}
{
    #if {"%1" == "off"} {
        #kill {tick} {leech};
        #variable {leech_on} {0};
        #echo {<fdc>You are no longer leeching.<088>}
    }; #elseif {"%1" == ""} {
        #if {$leech_on} {
            #echo {<fdc>You are currently leeching from %n.<088>} {$leech_from}
        } {
            #echo {<fdc>You are not leeching from anyone.<088>}
        }
    }; #else {
        #format {leech_from} {%l} {%1};
        #variable {leech_on} {1};
        #kill {tick} {leech};
        #ticker {leech} {
            #if {$my[gp1][current] / $my[gp1][max] < 0.33} {poke $leech_from}
        } {10};
        #echo {<fdc>You are now leeching from from %n.<088>} {$leech_from}
    }
}

#action {^You are no longer leeching}
{
    #if {$tactical_module} {
        tac enable
    };    
    cte
}

#action {^You are now leeching from %1}
{
    #if {$tactical_module} {
        #nop use the bigger Gen's tactical/stabilize/repair, disable your corpse trigger and assist;
        tac disable
    };
    ctd;
    cassist %1
}

#action {^Perform poke at whom?}
{
    #if {$leech_on} {
        leech off
    }
}

#action {^From afar, you poke}
{
    #if {$leech_on} {
        leech off
    }
}

/*
    Alias to configure a list of gentech to repair/stabilize and tactical enhance.

    Commands:
    tac add <name>      - add Gentech to the list
    tac remove <name>   - remove a Gentech from the list
    tac clear           - clear the list
    tac enable          - enable self and list actions
    tac disable         - disable self and list actions
    tac run             - if tac is enabled, enhance yourself and the list
    tac                 - display the list of Gentech to enhance
*/
#alias {tac}
{
    #switch {"%1"} {
        #case "add" {
            #if {"%2" != ""} {
                #local {lname} {@tolower{%2}};
                #if {@taclistindex{$lname} == 0} {
                    #list {tactical_list} {add} {$lname};
                    #echo {<fac>%n has been added to the tactical list.<088>} {$lname}
                }
            } {
                #echo {<fac>Invalid arguments.<088>}
            }
        };
        #case "remove" {
            #if {"%2" != ""} {
                #local {lname} {@tolower{%2}};
                #list {tactical_list} {delete} {@taclistindex{$lname}};
                #echo {<fac>%n has been removed from the tactical list.<088>} {$lname}
            } {
                #echo {<fac>Invalid arguments.<088>}
            }
        };
        #case "clear" {
            #list {tactical_list} {clear};
            #echo {<fac>Taclist cleared.<088>}
        };
        #case "on" {
            #variable tactical_on 1;
            #echo {<fac>Auto tactical is now on.<088>}
        };
        #case "off" {
            #variable tactical_on 0;
            #echo {<fac>Auto tactical is now off.<088>}
        };
        #case "run" {
            #if {$tactical_on == 1} {
                #nop enhance yourself;
                #send !repair;
                #send !stabilize;
                #send !tactical;
                #nop enhance the list;
                #foreach {$tactical_list[%*]} {name} {
                    #send !repair $name;
                    #send !stabilize $name;
                    #send !tactical $name
                }
            }
        };
        #default {
            #local {tacon} {};
            #local {tacwho} {};
            #if {$tactical_on} {
                #variable {tacon} {Auto tactical is enabled.}
            } {
                #variable {tacon} {Auto tactical is disabled.}
            };
            #if {&{tactical_list[]} == 0}
			{
				#variable {tacwho} {You have no one on your tactical list.}
			} {
				#foreach {*tactical_list[%*]} {index} {
                    #if {$index == 1} {
                        #format {tacwho} {%n} {$tactical_list[$index]}
                    } {
                        #format {tacwho} {%s, %n} {$tacwho} {$tactical_list[$index]}
                    }
				};
                #format {tacwho} {You have the following Gentech on your tactical list:\n%s} {$tacwho}
			};
            #echo {<fac>%s\n%s<088>} {$tacon} {$tacwho}
        }
    }
}

#action {^There is no %1 to Tactically Enhance here}
{
	#nop Delay the removal to prevent the list changing during foreach;
	#delay {0.5} {
		#local {lname} {@tolower{%1}};
		#list {tactical_list} {delete} {@taclistindex{$lname}};
		#echo {<fac>Removed %n from taclist.<088>} {$lname}
	}
}

#action {^[[ %1 can not accept your power transfer}
{
	tac add %1
}

#action {^ [[ Targeting %1 as Powerfeed Destination}
{
	tac add %1
}

#function {taclistindex}
{
	#list tactical_list find {%1} result
}

#action {^pattern buffer for storage. Your cloning was a success!}
{
	=call;
	=afollow on;
	=aswap on;
	=akill on
}

/*
	Update status on screen, triggered from mip updates.
	It can be called several times per round.
*/
#alias {update_status}
{	
	#nop create a few GP percentages;
	#math {my[gp1][perc]} {$my[gp1][current] * 100 / $my[gp1][max]};
	#math {my[gp2][perc]} {$my[gp2][current] * 100 / $my[gp2][max]};

	#NOP Build HP Bars;
	#format {hp}			{%+5s} {@colscale{$my[hp][current];$my[hp][max]}};
	#format {hp_max}		{%-5s} {<128>$my[hp][max]<088>};
	#format {sp}			{%+4s} {@colscale{$my[sp][current];$my[sp][max]}};
	#format {sp_max}		{%+4s} {<128>$my[sp][max]<088>};
	#format {pu}			{%+5s} {@colscale{$my[gp1][current];$my[gp1][max]}};
	#format {pu_max}		{%-5s} {<128>$my[gp1][max]<088>};
	#format {spu}			{%+4s} {<128>$my[gp2][current]<088>};
	#format {gxpdetails}	{%-4s} {$gentech[gxprc]};
	#format {ehealth}		{%+3s} {@colscale{$enemy[hp];100}};
	#format {corpses[inventory]} {%d} {$corpses[inventory]};
    #format {corpses[truck]} {%d} {$corpses[truck]};
    #format {corpses[coffin]} {%d} {$corpses[coffin]};
    #format {corpses[freezer]} {%d} {$corpses[freezer]};
	#format {roundcount} {%-4s} {$mip[round]};

	#var	{my[hp][graph]}		{@graph{$my[hp][current];$my[hp][max]}};
	#var	{my[sp][graph]}		{@graph{$my[sp][current];$my[sp][max]}};
	#var	{my[gp1][graph]}	{@graph{$my[gp1][current];$my[gp1][max]}};
	#var	{enemy[graph]}		{@graph{$enemy[hp];100}};

	#if {"$gentech[illum]" == "ON"} {#variable illumcol <138>} {#variable illumcol <108>};
	#if {"$gentech[bias][mode]" == "Locked"} {#variable biasmode +} {#variable biasmode -};
	#if {"$onkill" != ""} {#variable {onkill_status} {OK:<088><fca>${onkill}<088>}} {#variable {onkill_status} {}};

	#format {mipp1} {<088><130>CPC:<088><230>%+5s<088> <168>G2N:<088><268>%d<088> <168>RC:<088><268>%d<088> <128>TS:<088><228>%s/%s(%s)<088>} {$gentech[cpc][current]} {$gentech[gxp][tnl]} {$gentech[rc][num]} {$gentech[ts][current]} {$gentech[ets]} {$gentech[reset]};
	#format {mipp2} {<158>CB:<088><258>%s/%s%s<088> <148>EF:<088><248>%s%.1s<088> <178>ED:<088>%s%.1s} {$gentech[bias][atk]} {$gentech[bias][def]} {$biasmode} {$gentech[efield][num]} {$gentech[efield][unit]} {$gentech[edna][num]} {$gentech[edna][unit]};
	#format {gstatus} {<088>%sI%sC%sM%sL%sT%sS%sB%s%s%sH<088>} {$illumcol} {@statuscolour{$corpsetrig_on}} {@statuscolour{$mask_on}} {@statuscolour{$leech_on}} {@statuscolour{$tactical_on}} {@statuscolour{$scalers_enabled}} {@statuscolour{$biases_enabled}} {@statuscolour{$combat_que_on}} {$area_rating} {@statuscolour{$global_hardmode}};
	#format {corpsestatus} {<eea>%s<088>/<aff>%s<088>/<afc>%s<088>} {$corpses[inventory]} {$corpses[coffin]} {$corpses[freezer]};
	#format {botstatus} {%+3s/%-3s} {$path_pos} {$path_len};

	#line ignore #showme {$mipp1 $mipp2 ${gstatus}} {-6};
	#line ignore #showme {HP:${hp}/${hp_max} SP:${sp}/${sp_max}  PU:${pu}/${pu_max}(${spu}) B:$botstatus    <168>G:<088><268>${gxpdetails} $onkill_status<088>} {-4};

	#line ignore #showme {HP:${my[hp][graph]}  SP:${my[sp][graph]} PU:${my[gp1][graph]}        E:${enemy[graph]} R:$roundcount <088>CC:$corpsestatus} {-3};
}

#alias {.mipProcessGlineGentech} {
	#if {%1 == 1} {
		#regex {$mip[gline][1]} {CPC:<%d>%d<099>/%d G2N:%d(%d\%) RC[%d] Reset(<%d>%d\%<099>) TS:%d/%d E-TS:%d} {
			#VAR {gentech[cpc][current]}{&2};
			#VAR {gentech[cpc][max]}	{&3};
			#VAR {gentech[gxp][tnl]}	{&4};
			#VAR {gentech[gxp][per]}	{&5};
			#VAR {gentech[rc][num]}		{&6};
			#VAR {gentech[reset]}		{&8};
			#VAR {gentech[ts][current]}	{&9};
			#VAR {gentech[ts][max]}		{&10};
			#VAR {gentech[ets]}			{&11}
		};
		#replace {mip[gline][1]} {Reset} {R}
	}; #elseif {%1 == 2} {
		#regex {$mip[gline][2]} {Bias[<%d>%w<%d>] Atk(<%d>%d\%<%d>) Def(<%d>%d\%<%d>) <%d>Efield<%d>(<%d>%d%D<%d>) Edna(<%d>%d%D<%d>) Illum(<%d>%w<%d>)} {
			#VAR {gentech[bias][mode]}	{&2};
			#VAR {gentech[bias][atk]}	{&5};
			#VAR {gentech[bias][def]}	{&8};
			#VAR {gentech[efield][num]}	{&13};
			#VAR {gentech[efield][unit]}{&14};
			#VAR {gentech[edna][num]}	{&17};
			#VAR {gentech[edna][unit]}	{&18};
			#VAR {gentech[illum]}		{&21};
		}
	}; #else {
		#echo {<171> Invalid Gline Number <088>}
	}
} {1}
                                                        
#class {gentech} {close}

