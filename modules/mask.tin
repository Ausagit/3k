#nop mask.tin
/*
	Script for handling corpses with or without The mask of Gemino Mortis.
	This script allows the mask to be active or inactive, only reacting to mask
	events when the reclaim (mu) script is running. 
	Use the mu alias from update_status when your desired conditions are met to
	trigger a reclaim. Can be easily modified to suit your guild preferences.

	Change the order of corpse usage in the _select_corpse to your liking.

	Notes:
		Be careful in areas where your guild follower may not be able to follow.
		Assumes necromancer absorb is set to inventory first, then room.
		Corpse usage order: coffin, freezer, cooler, follower, self

	Variables:
	$mask_on			- 0: off, 1: own mask, 2: anyone's mask
	$recently_reclaimed	- prevent simultaneous reclaims and allow for GP to settle
	$mask_check			- set to 1, if 1 after 3s during a reclaim, mask failed, reclaim
	$ses_name			- your name from Inix's tintin setup
	$guild				- your guild name from Inix's tintin setup

	Usage:
	mask on			- Trigger from your mask only. Glyph is forced off when not reclaiming.
	mask all		- Trigger from anyone's mask. Manage the glyph manually.
	mask off		- Default, reclaim instantly.
	mask			- Show the mask and glyph status
	mask debug		- toggles debug mode for tracking issues
	mu [sel_qty]	- reclaim a single, or multiple corpses

	Example code for update_status (or hp trigger, etc).
	Note that update_status may fire several times in a round.
	#if {($recently_reclaimed == 0) && ($enemy[hp] > 1) && ($my[gp1][perc] < 40)} {
		#if {$mask_module} {
			#delay {reclaim} {mu} {0.1}
		} {
			#delay {reclaim} {
				#nop do your basic guild corpse commands;
			} {0.1}
		}
	};
*/
#class {mask} {kill}
#class {mask} {open}

#variable {mask_module} {1}
#variable {mask_on} {0}
#variable {recently_reclaimed} {0}
#variable {mask_check} {0}
#variable {mask_glyph_state} {unknown}
#variable {mask_debugging} {0}

#alias {mask}
{
    #switch {"%1"} {
        #case "on" {
            #variable {mask_on} {1};
            #echo {<ecf>You will use your mask only. Glyph usage is automatic.<088>};
			#if {"$mask_glyph_state" == "unknown" || "$mask_glyph_state" == "on"} {
				#nop make sure the glph is off as the default mask on state;
				#send !trace glyph
			}
        };
        #case "off" {
            #variable {mask_on} {0};
            #echo {<ecf>You will not use any masks, and will reclaim instantly.<088>};
			#if {"$mask_glyph_state" == "unknown" || "$mask_glyph_state" == "on"} {
				#nop toggle the glyph to ensure it's off;
				#send !trace glyph
			}
        };
        #case "all" {
            #variable {mask_on} {2};
            #echo {<ecf>You will now use anyone's mask. Glyph usage is manual.<088>};
			#if {"$mask_glyph_state" == "unknown"} {
				#nop get the glyph state, will throw errors if you have no mask - ignore;
				#send !trace glyph;
				#send !trace glyph
			}
        };
		#case "debug" {
			#if {$mask_debugging} {
				#variable mask_debugging 0;
				#echo {<ecf>Mask debugging is off.<088>}
			} {
				#variable mask_debugging 1;
				#echo {<ecf>Mask debugging is on.<088>}
			}
		};
        #default {
			#local {masktrigger} {};
			#local {maskglyph} {};
            #if {$mask_on == 1} {
                #variable {masktrigger} {You will trigger from your mask only}
            }; #elseif {$mask_on == 2} {
                #variable {masktrigger} {You will trigger from anyone's mask}
            }; #else {
                #variable {masktrigger} {You will use corpse(s) instantly,}
            };
			#echo {<ecf>%s and the glyph is %s.<088>} {$masktrigger} {$mask_glyph_state}
        }
    }
}

#nop use manually or from a script to replesnish GP1/2. Optional argument is number of corpses to attempt to reclaim.
#alias {mu}
{
	#if {$recently_reclaimed == 1} {
		#echo {<ecf>You must wait before reclaiming again.<088>}
	} {
		#if {$corpses[inventory] + $corpses[coffin] + $corpses[freezer] + $corpses[cooler] + $corpses[follower] > 0} {
			_select_corpse %1
		}
	}
}

#action {^The mask shines brightly}
{
	#variable {mask_glyph_state} {on};
	#if {$mask_on == 0} {
		#nop mask is off, turn glyph off;
		#send !trace glyph
	}; #elseif {$mask_on == 1 && $mask_check == 0} {
		#nop mask is on, not reclaiming, turn glyph off;
		#send !trace glyph
	}
} {1}

#action {^The mask emits a dull glow}
{
	#variable {mask_glyph_state} {off};
	#if {$mask_check == 1} {
		#nop the glyph should be active during a reclaim;
		#send !trace glyph
	}
} {1}

#action {^{You keep \*?The mask of Gemino Mortis.*\(worn}}
{
	#nop automatically turn the mask on when you keep it and it's worn;
	mask on
} {1}

#action {^You have no mask.}
{
	#variable {mask_on} {0};
	#variable {mask_glyph_state} {unknown}
} {1}

#action {^%1's eyes glow bright green upon the fallen}
{
	#local {lname} {};
	#format {lname} {%l} {%1};
	#if {$mask_check == 1 && (($mask_on == 1 && "$lname" == "$ses_name") || $mask_on == 2)} {
		#nop reclaim the two corpses and reduce the cleanup tracking by one;
		_guild_reclaim 2;
		#math {cleanup_qty} {$cleanup_qty - 1};
		_mask_debug MASK: cleanup_qty remaining $cleanup_qty;
	} {
		#variable {mask_check} {0}
	}
} {1}

#action {^%1's eyes glow a sickly green upon the fallen}
{
	#local {lname} {};
	#format {lname} {%l} {%1};
	#if {$mask_check == 1 && (($mask_on == 1 && "$lname" == "$ses_name") || $mask_on == 2)} {
		#nop reclaim the single corpses and reduce the cleanup tracking by one;
		_guild_reclaim 1;
		#math {cleanup_qty} {$cleanup_qty - 1};
		_mask_debug MASK: cleanup_qty remaining $cleanup_qty;
	} {
		#variable {mask_check} {0}
	}
} {1}

#alias {_cleanup_reclaim}
{
	#nop after the corpse cloning has occured (or been skipped due to cloned or preserved corpses), cleanup (reclaim) the remainder;
	#variable {mask_check} {0};
	#if {$mask_on == 1} {#send !trace glyph};
	_mask_debug MASK: cleanup_reclaim $cleanup_qty;
	#if {$cleanup_qty > 0} {
		_guild_reclaim $cleanup_qty
	};
	#delay {finish_reclaim} {_finish_reclaim} {3}
}

#alias {_finish_reclaim}
{
	#nop end the reclaim process - GP should have settled by now;
	#variable {cleanup_qty} {0};
	#variable {recently_reclaimed} {0};
	#variable {mask_check} {0};
	_mask_debug MASK: finished reclaim;
}

#alias {_select_corpse}
{
	#local {unwrapped_qty} {0};
	#local {sel_qty} {0};
	#if {"%1" != ""} {#math {sel_qty} {%1 * 1}};
	#if {$sel_qty < 1} {#local sel_qty 1};
	#variable {mask_check} {0};
	#variable {recently_reclaimed} {1};

	_mask_debug MASK: select_corpse $sel_qty;

	#nop coffin corpses can be fresh or preserved so should wait for the mask to clone;
	#if {$sel_qty > 0 && $corpses[coffin] > 0} {
		#if {$corpses[coffin] >= $sel_qty} {
			_mask_debug MASK: selecting coffin $sel_qty;
			#$sel_qty {#send !unwrap};
			#if {$mask_on == 0} {
				_guild_reclaim $sel_qty
			} {
				#math {unwrapped_qty} {$unwrapped_qty + $sel_qty}
			};
			#local {sel_qty} {0}
		} {
			_mask_debug MASK: selecting coffin $corpses[coffin];
			#$corpses[coffin] {#send !unwrap};
			#if {$mask_on == 0} {
				_guild_reclaim $corpses[coffin]
			} {
				#math {unwrapped_qty} {$unwrapped_qty + $corpses[coffin]}
			};
			#math {sel_qty} {$sel_qty - $corpses[coffin]}
		}
	};

	#nop freezer corpses are always fresh and wait for the mask to clone;
	#if {$sel_qty > 0 && $corpses[freezer] > 0} {
		#if {$corpses[freezer] >= $sel_qty} {
			_mask_debug MASK: selecting freezer $sel_qty;
			#$sel_qty {#send !deslab};
			#if {$mask_on == 0} {
				_guild_reclaim $sel_qty
			} {
				#math {unwrapped_qty} {$unwrapped_qty + $sel_qty}
			};
			#local {sel_qty} {0}
		} {
			_mask_debug MASK: selecting freezer $corpses[freezer];
			#$corpses[freezer] {#send !deslab};
			#if {$mask_on == 0} {
				_guild_reclaim $corpses[freezer]
			} {
				#math {unwrapped_qty} {$unwrapped_qty + $corpses[freezer]}
			};
			#math {sel_qty} {$sel_qty - $corpses[freezer]}
		}
	};
	
	#nop cooler corpses are assumed to be fresh and wait for the mask to clone;
	#if {$sel_qty > 0 && $corpses[cooler] > 0} {
		#if {$corpses[cooler] >= $sel_qty} {
			_mask_debug MASK: selecting cooler $sel_qty;
			#$sel_qty {#send !uncooler corpse};
			#if {$mask_on == 0} {
				_guild_reclaim $sel_qty
			} {
				#math {unwrapped_qty} {$unwrapped_qty + $sel_qty}
			};
			#local {sel_qty} {0}
		} {
			_mask_debug MASK: selecting cooler $corpses[cooler];
			#$corpses[cooler] {#send !uncooler corpse};
			#if {$mask_on == 0} {
				_guild_reclaim $corpses[cooler]
			} {
				#math {unwrapped_qty} {$unwrapped_qty + $corpses[cooler]}
			};
			#math {sel_qty} {$sel_qty - $corpses[cooler]}
		}
	};

	#nop follower corpses are assumed to be preserved and reclaimed straight away;
	#if {$sel_qty > 0 && $corpses[follower] > 0} {
		#if {$corpses[follower] >= $sel_qty} {
			_mask_debug MASK: selecting follower $sel_qty;
			#$sel_qty {#send !=drop corpse};
			_guild_reclaim $sel_qty;
			#local {sel_qty} {0}
		} {
			_mask_debug MASK: selecting follower $corpses[follower];
			#$corpses[follower] {#send !=drop corpse};
			_guild_reclaim $corpses[follower];
			#math {sel_qty} {$sel_qty - $corpses[follower]}
		}
	};

	#nop inventory corpses are assumed to be preserved and reclaimed straight away;
	#if {$sel_qty > 0 && $corpses[inventory] > 0} {
		#if {$corpses[inventory] >= $sel_qty} {
			_mask_debug MASK: selecting inventory $sel_qty;
			#$sel_qty {#send !drop corpse};
			_guild_reclaim $sel_qty;
			#local {sel_qty} {0}
		} {
			_mask_debug MASK: selecting inventory $corpses[inventory];
			#$corpses[inventory] {#send !drop corpse};
			_guild_reclaim $corpses[inventory];
			#math {sel_qty} {$sel_qty - $corpses[inventory]}
		}
	};

	#if {$unwrapped_qty > 0} {
		#nop corpses waiting for mask cloning so wait and cleanup;
		#variable mask_check 1;
		#if {$mask_on == 1} {#send !trace glyph};
		#variable {cleanup_qty} {$unwrapped_qty};
		_mask_debug MASK: setting cleanup_qty $cleanup_qty;
		#delay {cleanup_reclaim} {_cleanup_reclaim} {3}
	} {
		#nop no corpses waiting for mask cloning so finish up;
		#delay {finish_reclaim} {_finish_reclaim} {3}
	}
}

#alias {_guild_reclaim}
{
	#local {sel_qty} {0};
	#if {"%1" != ""} {#math {sel_qty} {%1 * 1}};
	#if {$sel_qty < 1} {#local sel_qty 1};

	_mask_debug MASK: guild_reclaim $sel_qty;

	#nop add or update your guild-specific corpse handling here;
	#switch {"$guild"} {
		#case "gentech" {
			#$sel_qty {recharge;reclaim}
		};
		#case "necromancer" {
			#$sel_qty {preserve get;absorb}
		};
		#case "fremen" {
			#$sel_qty {reclaim}
		};
		#case "knight" {
			#$sel_qty {bury corpse}
		};
		#case "cyborg" {
			#$sel_qty {decompose corpse}
		};
		#case "changeling" {
			#$sel_qty {absorb}
		};
		#case "angel" {
			#$sel_qty {disperse}
		};
		#case "bard" {
			#$sel_qty {perform dirge}
		};
		#case "jedi" {
			#$sel_qty {absorb energy}
		};
		#case "monk" {
			#$sel_qty {study corpse}
		};
		#case "priest" {
			#$sel_qty {offer corpse}
		};
		#case "bladesinger" {
			#$sel_qty {salute corpse}
		};
		#case "mage" {
			#$sel_qty {cast corpse blast}
		};
		#default {
			#echo {** Unhandled guild type in mask.tin! **};
			#bell
		}
	}
}

#alias {_mask_debug}
{
	#if {$mask_debugging} {
		#echo {<488><ecf>%0<088>}
	}
}

#class {mask} {close}
