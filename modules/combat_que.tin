#nop combat_que.tin
/*
    Usage:
        Add 'cq reset' to corpsetrig to remove the locked status on each kill
        Add some cue items, 'cq add name/rating/when/priority/repeat/cmd/condition'
        Toggle manual mode on and off with 'cq manual'
        Enable the que, 'cq on'.
        Manage the [ready] status by calling update_cooldown <name> <0/1> from actions, like the rod runes at the end of this file.

        Rating data is saved to .tt/3k/char/<charname>-ratings.tin
        Que data is saved to .tt/3k/char/<charname>-<guildname>-que.tin or .tt/3k/char/<charname>-<guildname>-<filename>-que.tin

    Suggested:
	    Add guildsetup as the first command in the area's botpath variable add a guildsetup alias to your <guild>.tin file.
	    Add 'rate run' to the alias to set the area rating based on the stepper name when you enter.

    Combat Que Commands:
        cq                  - show the list
        cq ready            - show the list (ready-only lines)
        cq on               - enable the que
        cq off              - disable the que
        cq manual           - by default que runs from a ticker, this toggles the que to run manually, e.g. 'cq run' from a trigger
        cq sort <column>    - sorts the list by the specified column (name|rating|when|ready|priority|command|condition|locked)
        cq disable <name>   - disable the specified que item
        cq enable <name>    - enable the specified que item
        cq add <args>       - add a que item, args are mandatory, except for condition
                              <name>/<rating>/<when>/<priority>/<repeat>/<cmd>/<condition>
        cq remove <name>    - remove the specified que item
        cq load [filename]  - loads the default combat que file without an argument, else the file specified, if existing
        cq save [filename]  - saves the que to the currently used filename without an argument (shown on the top of the cq page)
                              saves to a new file if an argument is specified. Will overwrite without warning.

    Script to automatically change rating when entering dungeons using your preconfigured list of dungeon::ratings.
	The data is automatically saved to the file .tt/3k/char/<charname>-ratings.tin file.
	
    Rate Commands:
        rate add <area> <rating>	- add/update scaler for the area
        rate remove <area>	        - remove the area from the list
        rate run					- change the scaler based on the configured setting and $bots[stepper]
        rate						- show a list of configured scalers
        rate <number>               - set a manual rating
    
    Injecting script:
        You can use script for the command, however you must not use variables directly; use the $:var_name format instead of $, see the example below.
    
    Que item options:
        name      - short name of the item
        rating    - number from 0 to 9 to indicate the dungeon/area difficulty this ability should only be used in, 0 = que ignored, 9 = max
        when      - start/high/med/low/end/any, first few rounds or at any round, high health, med health or low health
        priority  - 0-999 priority - the que is processed from highest priority to lowest
        repeat    - flag to indicate if the ability can be used more than once per fight: 1=repeatable, used whenever ready=1, 0=non-repeatable, locked on use
        cmd       - the command to send to the mud, can include some scripting elements
        condition - script to add a custom condition, e.g. '$:mobname' == 'brain'  Note $: instead of $ and ' instead of "        
        ready     - flag to indicate the ability is on/off cooldown: 1=ready, 2=on cd
        enabled   - flag to enable/disable the comabt que item manually
        locked    - managed internall, flag to lock the ability after the first use if it's non-repeatable, reset on kill

    <when> options:
        start: rounds < 5, health >= 90%
        low:   health >= 10%
        med:   health >= 50%
        high:  health >= 80%
        end:   health < 5%
        any:   any mob health or rounds number
    
    Todo:
        Investigate ways of resetting rating when leaving a dungeon and manually running around
*/

#class {ratinglist} {kill}
#class {combat_que} {kill}
#class {combat_que} {open}

#variable {combat_que_on} {0}
#variable {combat_que_manual} {0}
#variable {cq_debug} {0}
#variable {combat_que_module} {1}
#variable {area_rating} {0}
#variable {cq2} {}
#variable {sort_by} {rating}
#variable {cqfilename} {}

#alias {_cq_init}
{
    #nop create an empty que when the module loads;
    #class {combat_que_list} {kill};
    #class {combat_que_list} {open};
    #variable {combat_que} {};
    #class {combat_que_list} {close};
    #class {combat_que_list} {save};
}
_cq_init

#nop example que
#alias {cq_example}
{
    cq clear;
    cq add ewell/7/start/500/0/(energy well;
    cq add owl/8/end/0/0/touch owl rune;
    cq add raven/9/start/0/0/touch raven rune;
    cq add heal/1/any/999/1/(heal $:ses_name/$:my[hp][current] < 1000;
    cq add hmheal/5/any/900/1/hmheal/@:check_health{1000};
    rate 8;
    cq on
}

#nop to check health under 70%, use: @:check_health{70}
#function {check_health}
{
    #if {$my[hp][current] < %1} {
        #variable {result} {1}
    } {
        #variable {result} {0}
    }
}

#alias {cq}
{
    #switch {"%1"} {
        #case "" {
            _showcombatque;
        };
        #case "add" {
            #regexp {%0} {{add ([a-zA-Z0-9_]{1,12})\/(-?[0-9])\/(start|end|high|med|low|any)\/([0-9]{1,3})\/([0-9])\/([a-zA-Z0-9_\$\:='@\( ]+)(?:\/)?(.*)?}} {
                #nop cq add <name>/<rating>/<when>/<priority>/<repeat>/<cmd>/<condition>;
                #nop cq add   %2     %3       %4      %5         %6     %7       &8;
                #nop some housekeeping;
                #local {cdname} {};
                #format {cdname} {%l} {&2};
                #local {index} {@get_cq_index{$cdname}};
                #local {condition} {&8};
                #replace {condition} {'} {"};

                #if {$index != 0} {
                    #nop delete the existing entry and replace it;
                    #list {combat_que} {delete} {$index}
                };

                #list {combat_que} {add} {{{name}{$cdname}{rating}{&3}{when}{&4}{priority}{&5}{repeat}{&6}{cmd}{&7}{condition}{$condition}{locked}{0}{ready}{1}{enabled}{1}}};
                #echo {<028>Combat que <128>$cdname<028> added. Note, changes are not saved automatically.<088>};

            } {
                #echo {<028>Syntax is:\ncq add name/rating/when/priority/repeat/command/condition<088>}
            }
        };
        #case "clear" {
            #variable {combat_que} {};
            #variable {combat_que_on} {0};
            #variable {cqfilename} {};
            #echo {<028>Combat que cleared.<088>}
        };
        #case "load" {
            #local {filename_ok} {0};
            #local {cqfilename_temp} {};
            #local {cuelistsize} {};
            #if {"%2" == ""} {
                #variable {cqfilename_temp} {$ses_name-$guild-que.tin};
                #variable {filename_ok} {1}
            } {
                #regexp {%0} {{load ([a-zA-Z0-9_]{1,30})}} {
                    #nop valid format;
                    #variable {cqfilename_temp} {$ses_name-$guild-&2-que.tin};
                    #variable {filename_ok} {1}
                } {
                    #echo {<028>Filename must be a combination of letters, numbers and underscore.<088>};
                    #variable {filename_ok} {0}
                }
            };

            #if {$filename_ok} {
                #nop backup the current que data;
                #local {cq_temp} {$combat_que};
                #class {combat_que_list} {kill};
                #class {combat_que_list} {read} {.tt/char/$cqfilename_temp};
                #class {combat_que_list} {size} {cuelistsize};
                #if {$cuelistsize == 0} {
                    #echo {<028>Combat que <128>$cqfilename_temp<028> not found.<088>};
                    #nop recreate the empty cue list and popular from the backup;
                    _cq_init;
                    #variable {combat_que} {$cq_temp};
                } {
                    #nop everthing is ok, cue has loaded from file;
                    #variable {cqfilename} {$cqfilename_temp};
                    #foreach {*combat_que[]} {index} {
                        #variable {combat_que[$index][locked]} {0};
                        #variable {combat_que[$index][ready]} {1}
                    };
                    #echo {<028>Combat que <128>$cqfilename<028> loaded.<088>};
                    #if {$combat_que_on} {
                        #echo {<028>Combat cue is currently <128>enabled<028>.<088>};
                    } {
                        #echo {<028>Combat cue is currently <018>disabled<028>.<088>};
                    }
                }
            }
        };
        #case "save" {
            #if {"%2" == ""} {
                #if {"$cqfilename" == ""} {
                    #nop save as the default file;
                    #variable {cqfilename} {$ses_name-$guild-que.tin}
                } {
                    #nop ratain the current filename
                };
                #class {combat_que_list} {write} {.tt/char/$cqfilename};
                #echo {<028>Combat que saved to <128>$cqfilename<028>.<088>}
            } {
                #regexp {%0} {{save ([a-zA-Z0-9_]{1,30})}} {
                    #nop valid format;
                    #variable {cqfilename} {$ses_name-$guild-&2-que.tin};
                    #class {combat_que_list} {write} {.tt/char/$cqfilename};
                    #echo {<028>Combat que saved to <128>$cqfilename<028>.<088>}
                } {
                    #echo {<028>Filename must be a combination of letters, numbers and underscore.<088>};
                }
            }
        };
        #case "on" {
            #if {&{combat_que[]} != 0} {
                #variable {combat_que_on} {1};
                #if {$combat_que_manual == 0} {
                    #ticker {combat_que} {cq run} {1}
                };
                #echo {<028>Combat que <128>enabled.<088>}
            } {
                #echo {<028>Combat que cannot be enabled because it's empty.<088>}
            }
        };
        #case "off" {
            #variable {combat_que_on} {0};
            #unticker {combat_que};
            #echo {<028>Combat que <018>disabled<028>.<088>}
        };
        #case "manual" {
            #nop toggle manual mode on/off;     
            #if {"%2" == "on"} {
                #variable {combat_que_manual} {1};
                #unticker {combat_que};
                #echo {<028>Combat que will now run manually, use <128>cq run<028> to run it every round.<088>}
            };
            #elseif {"%2" == "off"} {
                #variable {combat_que_manual} {0};
                #ticker {combat_que} {cq run} {1};
                #echo {<028>Combat que will now run automatically.<088>}        
            };
            #else {
                #if {$combat_que_manual} {
                    #variable {combat_que_manual} {0};
                    #ticker {combat_que} {cq run} {1};
                    #echo {<028>Combat que will now run automatically.<088>}
                } {
                    #variable {combat_que_manual} {1};
                    #unticker {combat_que};
                    #echo {<028>Combat que will now run manually, use <128>cq run<028> to run it every round.<088>}
                }
            }
        };
        #case "sort" {
            #regexp {%0} {{sort (name|rating|when|ready|priority|command|condition|locked)}} {
                #variable {sort_by} {&2};
                cq
            } {
                #echo {<028>Unknown sort option.<088>}
            }
        };
        #case "refresh" {
            #foreach {*combat_que[]} {index} {
                #variable {combat_que[$index][locked]} {0}
            };
            #if {$cq_debug} {#echo {CQ: refreshed}}
        };
        #case "enable" {
            #local {index} {@get_cq_index{%2}};
            #if {$index > 0} {
                #variable {combat_que[$index][enabled]} {1};
                #echo {<028>Combat que <128>$combat_que[$index][name]<028> enabled.<088>}
            } {
                #echo {<028>Combat que <128>%2<028> not found.<088>}
            }
        };
        #case "disable" {
            #local {index} {@get_cq_index{%2}};
            #if {$index > 0} {
                #variable {combat_que[$index][enabled]} {0};
                #echo {<028>Combat que <128>$combat_que[$index][name]<028> disabled.<088>}
            } {
                #echo {<028>Combat que <128>%2<028> not found.<088>}
            }
        };
        #case "remove" {
            #local {index} {@get_cq_index{%2}};
            #if {$index > 0} {
                #echo {<028>Combat que <128>$combat_que[$index][name]<028> removed. Note, changes are not saved automatically.<088>};
                #list {combat_que} {delete} {$index};
            } {
                #echo {<028>Combat que <128>%2<028> not found.<088>}
            }
        };
        #case "debug" {
            #if {$cq_debug} {
                #variable {cq_debug} {0};
                #echo {<028>Combat que debug disabled.<088>}
            } {
                #variable {cq_debug} {1};
                #echo {<028>Combat que debug enabled.<088>}
            }
        };
        #case "help" {
            #echo {<028>Coming soon...<088>}
        };
        #case "ready" {
            _showcombatque ready;
        };
        #case "run" {
            #if {$combat_que_on == 1 && ($mip[round] > 0 || "%2" != "") && ($enemy[hp] > 0 || "%2" != "")}
            {
                #list {combat_que} {indexate} {priority};
                #list {combat_que} {order};
                #list {combat_que} {reverse};

                #foreach {*combat_que[]} {index} {      
                    #if {$combat_que[$index][enabled] == 1} {
                        #if {@check_ready{$index} == 0} {
                            #if {$cq_debug} {#echo {CQ: $combat_que[$index][name] not ready}};
                            #continue
                        };
                       #if {@check_locked{$index} == 0} {
                            #if {$cq_debug} {#echo {CQ: $combat_que[$index][name] not executed: locked}};
                            #continue
                        };
                        #if {@check_rating{$index} == 0} {
                            #if {$cq_debug} {#echo {CQ: $combat_que[$index][name] not executed: rating: $combat_que[$index][rating] vs $area_rating}};
                            #continue
                        };      
                        #if {@check_when{$index} == 0} {
                            #if {$cq_debug} {#echo {CQ: $combat_que[$index][name] not executed: when: $combat_que[$index][when]}};
                            #continue
                        };        
                        #if {@check_condition{$index} == 0} {
                            #if {$cq_debug} {#echo {CQ: $combat_que[$index][name] not executed: condition not met}};
                            #continue
                        };                        
                        #nop passed all conditions, execute!;       
                        #if {$cq_debug} {#echo {CQ: Executing $combat_que[$index][name], cmd: $combat_que[$index][cmd]}};
                        @execute_index{$index}
                    }
                }
            }
        };
        #default {
            #echo {<028>Unknown command, use <128>cq [add/remove/run/clear/debug/refresh/enable/disable]<088>}
        }
    }
}

#function {sort_colour}
{
    #if {"%1" == "$sort_by"} {
        #variable {result} {<488><128>}
    } {
        #variable {result} {<128>}
    }
}

#alias {_showcombatque}
{
    #local {cuelist} {};
    #format {cuelist} {<128> COMBAT QUE %-50s        <088>%sEN<088> <128>AR:<028>%s<088>} {[$cqfilename]} {@check_colour{$combat_que_on}} {$area_rating} {$cuelist};
    #format {cuelist} {%s\n<028>==============================================================================<088>} {$cuelist};
    #format {cuelist} {%s\n<128> %sName<088>         %sRtg<088> %sWhen<088>  %sPri<088> %sRep<088> %sRdy<088> %sLck<088> %sCommand<088>              %sCondition<088><088>} {$cuelist}
        {@sort_colour{name}} {@sort_colour{rating}} {@sort_colour{when}} {@sort_colour{priority}} {@sort_colour{repeat}} {@sort_colour{ready}}
        {@sort_colour{locked}} {@sort_colour{command}} {@sort_colour{condition}};
    #format {cuelist} {%s\n<028>------------------------------------------------------------------------------<088>} {$cuelist};

    #if {&{combat_que[]} == 0} {
        #format {cuelist} {%s\n You have no configured combat que items} {$cuelist}
    } {
        #list {combat_que} {indexate} {$sort_by};
        #list {combat_que} {order};
        #if {"$sort_by" == "priority"} {
            #list {combat_que} {reverse}
        };
        #foreach {*combat_que[]} {index} {
            #local {showelement} {1};
            #if {"%1" == "ready" && ($combat_que[$index][ready] == 0 || @check_rating{$index} == 0)} {
                #local {showelement} {0}
            };
            #if {$showelement} {
                #format {cuelist} {%s\n %s%-12s<088> %s%-3d<088> %s%-5s<088> %-3d %-3d %s%-3d<088> %s%-3d<088> %-20s %s%s<088>} {$cuelist}
                    {@check_colour{@check_enabled{$index}}} {$combat_que[$index][name]}
                    {@check_colour{@check_rating{$index}}} {$combat_que[$index][rating]}
                    {@check_colour{@check_when{$index}}} {$combat_que[$index][when]}
                    {$combat_que[$index][priority]}
                    {$combat_que[$index][repeat]}
                    {@check_colour{@check_ready{$index}}} {$combat_que[$index][ready]}
                    {@check_colour{@check_locked{$index}}} {$combat_que[$index][locked]}
                    {$combat_que[$index][cmd]}
                    {@check_colour{@check_condition{$index}}} {$combat_que[$index][condition]};
            }
        }
    };
    #echo {$cuelist<088>}
}

#function {get_cq_index}
{
    #if {&{combat_que[]} != 0} {
        #local {cdname} {};
        #format {cdname} {%l} {%1};
        #list {combat_que} {indexate} {name};
        #list {combat_que} {find} {$cdname} {result}
    } {
        #variable {result} {0}
    }
}

#function {execute_name}
{
    #local {index} {@get_cq_index{%1}};
    #if {$index > 0} {
        #variable {result} {@execute_index{$index}}
    }
}

#function {execute_index}
{
    #if {$combat_que[%1][repeat] == 0} {
        #variable {combat_que[%1][locked]} {1}
    };
    #variable {exec} {$combat_que[%1][cmd]};
    #replace {exec} {'} {"};
    #replace {exec} {$:} {$};
    #replace {exec} {@:} {@};
    #variable {result} {$exec}
}

#function {check_enabled}
{
    #variable {result} {$combat_que[%1][enabled]}
}

#function {check_ready}
{
    #variable {result} {$combat_que[%1][ready]}
}

#function {check_locked}
{
    #if {$combat_que[%1][locked] == 1} {
        #variable {result} {0}
    } {
        #variable {result} {1}
    }
}

#function {check_rating}
{
    #variable {result} {0};

    #if {$combat_que[%1][rating] >= 0} {
        #nop positive rating, so check que rating > area rating;
        #if {$combat_que[%1][rating] <= $area_rating} {
            #variable {result} {1}
        }
    } {
        #nop negative que rating, so check that -1 * (que rating) < $area rating;
        #if {$combat_que[%1][rating] + $area_rating <= 0} {
            #variable {result} {1};
        }
    }
}

#function {check_when}
{
    #variable {result} {0};

    #switch {"$combat_que[%1][when]"} {
        #case "start" {
            #if {$mip[round] < 5 && $enemy[hp] >= 75} {
                #variable {result} {1}
            }
        };
        #case "low" {
            #if {$enemy[hp] >= 10} {
                #variable {result} {1}
            }
        };
        #case "med" {
            #if {$enemy[hp] >= 50} {
                #variable {result} {1}
            }
        };
        #case "high" {
            #if {$enemy[hp] >= 80} {
                #variable {result} {1}
            }
        };
        #case "end" {
            #if {$enemy[hp] <= 5} {
                #variable {result} {1}
            }
        };
        #case "any" {
            #variable {result} {1}
        };
        #default {
            #variable {result} {0}
        }
    }
}

#function {check_condition}
{
    #if {"$combat_que[%1][condition]" == ""} {
        #variable {result} {1}
    } {
        #variable {exec} {#if {$combat_que[%1][condition]} {#variable result 1} {#variable result 0}};
        #replace {exec} {$:} {$};
        #replace {exec} {@:} {@};
        #replace {exec} {'} {"};
        $exec;
    }
}

#function {check_colour}
{
    #if {%1 == 1 || "%1" == "ON"} {
		#variable {result} {<228>}
	} {
        #variable {result} {<218>}
    }
}

#alias {update_cooldown %1 %d}
{
    #local {index} {@get_cq_index{%1}};
    #if {$index > 0} {
        #if {%2 == 0} {
            #nop abilitiy has been used;
            #variable {combat_que[$index][ready]} {0};
            #if {$cq_debug} {#echo {CQ: $combat_que[$index][name] coodown: $combat_que[$index][ready]}};
        } {
            #nop ability has come off cooldown, attempt to use it again if repeatable;
            #variable {combat_que[$index][ready]} {1};
            #if {$combat_que[$index][repeatable]} {
                @execute_index{$index};
                #if {$cq_debug} {#echo {CQ: $combat_que[$index][name] coodown: $combat_que[$index][ready], repeatable, executing}};
            } {
                #if {$cq_debug} {#echo {CQ: $combat_que[$index][name] coodown: $combat_que[$index][ready], non-repeatable}};
            }
        }
    }
}


#class {ratinglist} {read} {.tt/char/$ses_name-ratings.tin}
#class {ratinglist} {size} {scalerssize};

#if {$scalerssize == 0} {
	#echo {Rating file not found, creating default.};
	#class {ratinglist} {kill};
	#class {ratinglist} {open};
	#variable {ratings} {};
	#class {ratinglist} {close};
	#class {ratinglist} {save};
	#class {ratinglist} {write} {.tt/char/$ses_name-ratings.tin};
}

#unvariable {scalerssize}
#variable {ratings_module} {1}

#alias {rate}
{
	#switch {"%1"} {
		#case "add" {
			#if {"%2" != "" && "%3" != "" && %3 >= 0 && %3 <= 9}
			{
				#variable {ratings[$guild][%2]} {%3};
				#class {ratinglist} {write} {.tt/char/$ses_name-ratings.tin};
				#echo {<028>Area %2 rating set to %3.<088>}
			} {
				#echo {<028>Syntax is 'rate add <stepper_name> <0-5>'.<088>}
			}
		};
		#case "remove" {
			#if {"%2" != ""} {
				#unvariable {ratings[$guild][%2]};
				#class {ratinglist} {write} {.tt/char/$ses_name-ratings.tin};
				#echo {<028>Area %2 rating removed.<088>}
			} {
				#echo {<028>Syntax is 'rate remove <stepper_name>'.<088>}
			}
		};
		#case "run" {
			#if {$ratings[$guild][$bots[stepper]]} {
				#variable {area_rating} {$ratings[$guild][$bots[stepper]]}
			} {
                #variable {area_rating} {0}
            };
            #echo {<028>Area rating set to $area_rating<088>}
		};
		#case "" {
            #local {header} {};
			#nop #format {header} {%n} {$guild};
            #local {cuelist} {};
            #format {cuelist} {<128> AREA RATINGS %-25s <028>AR:%s<088>} {$header} {$area_rating};
            #format {cuelist} {%s\n<028>=============================================<088>} {$cuelist};
            #format {cuelist} {%s\n<128> Rtg Area Name<088>} {$cuelist};
            #format {cuelist} {%s\n<028>---------------------------------------------<088>} {$cuelist};
    		#if {&{ratings[]} == 0} {
				#format {cuelist} {%s\n| No ratings set} {$cuelist}
			} {
				#foreach {*ratings[$guild][%*]} {name} {
					#format {cuelist} {%s\n  %d  %s} {$cuelist} {$ratings[$guild][$name]} {$name}
				}				
			};
            #echo {$cuelist};
		};
		#default {
			#math {area_rating} {%1};
            #if {$area_rating >= 0 && $area_rating <= 9} {
                #echo {<afc>Manual rating set to $area_rating.<088>}
            } {
                #echo {<afc>Invalid area rating, range is 0-9.<088>}
            }
		}
	}
}

/*
    Cooldown Tracking
*/
#nop A trigger for energy well already exists in chat_monitors.tin, override with a higher priortiy
#action {^A shimmering ball of energy appears magically when %w snap}
{
    update_chat <158>Energy Well Actived<088> by <138>%1<088>!;
    #if {"%1" == "you"} {
        update_cooldown ewell 0;
        #delay {energywell} {update_cooldown ewell 1} {1680}
    }
} {1}


#nop events from the rolm.tin module
#alias {on_rolm_rune_recharged}
{
    update_cooldown %1 1
}

#alias {on_rolm_rune_activated}
{
    update_cooldown %1 0
}

#alias {on_rolm_rune_failed}
{
    update_cooldown %1 0
}


#action {^A shimmering sphere of energy engulfs you}
{
    update_cooldown protection 0;
    #delay {cq_protection} {update_cooldown protection 1} {9720}
}

#action {^You tear apart %* defenses!}
{
    update_cooldown shred 0;
    #delay {cq_shred} {update_cooldown shred 1} {540}
}

#action {^You bathe %* in the healing powers of the outer planes}
{
    update_cooldown heal 0;
    #delay {cq_heal} {update_cooldown heal 1} {600}
}

#action {^You invoke the powers of life and death to surround and protect you}
{
    update_cooldown immortality 0;
    #nop in case of a complete nolifer;
    #delay {cq_immortality} {update_cooldown immortality 1} {267840}
}

#action {^Energy flashes down from the sky, frying}
{
    update_cooldown fry 0;
    #delay {cq_fry} {update_cooldown fry 1} {3960}
}

#action {^You call forth high mortal energies to heal yourself!}
{
    update_cooldown hmheal 0;
    #delay {cq_hmheal} {update_cooldown hmheal 1} {3600}
}

#class {combat_que} {close}
